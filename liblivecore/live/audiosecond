/*******************************************************

    Part of the Creator Live Music Production Suite.
Copyright (C) Joshua Netterfield <joshua@nettek.ca> 2012

                  All rights reserved.

*******************************************************/

#ifndef AUDIOSECOND_H
#define AUDIOSECOND_H

#include <live/audio>
#include <live/audiograph>
#include <live/object>
#include <QCoreApplication>
#include <QReadWriteLock>
#include <QTimer>

namespace live {

class LIBLIVECORESHARED_EXPORT AudioSecond
{
       /*SAMPLE RATE->VERIFY->003*/
    quint32 m_sampleOffset;     /*004*/
    float* m_data;          /*005*/
    QMap<long, AudioGraph*> m_graphs; /*???*/
public:
    friend class AudioContainer;
    friend class AudioGraph;

    AudioSecond(quint32 cbegin)
      : m_sampleOffset(cbegin)
      , m_data(new float[live::audio::sampleRate()])
      , m_graphs()
      { for(int i=0;i<live::audio::sampleRate();i++)
        {
            m_data[i]=0.0f;
        }
    }
    ~AudioSecond() { delete[]m_data; }

    inline float& operator[](const int&sample)
    {
        return m_data[sample-m_sampleOffset];
    }

    void newGraph(const long& boxSize)
    {
        for (QMap<long, AudioGraph*>::iterator it = m_graphs.begin(); it != m_graphs.end(); ++it) {
            if ((*it)->size() == boxSize) {
                (*it)->incrRef();
                return;
            }
        }
        AudioGraph* g = new AudioGraph(this, boxSize);
        if (!live::lthread::isAudio()) {
            g->setPos(0);
            g->append(live::audio::sampleRate()-1);
        }

        kill_kitten m_graphs.insert(boxSize,g);
    }

    inline void deleteGraph(const long& boxSize)
    {
        AudioGraph* g = m_graphs.value(boxSize);
        Q_ASSERT(g);
        if (!g) return;

        if (g->decrRef()) {
            m_graphs.remove(boxSize);
            delete g;
        }
    }

    void updateGraph(const long& frame) {
        for (QMap<long, AudioGraph*>::iterator it = m_graphs.begin(); it != m_graphs.end(); ++it) {
            it.value()->updateBoxWithFrame(frame);
        }
    }

    void pointGraph(const long& frame) {
        for (QMap<long, AudioGraph*>::iterator it = m_graphs.begin(); it != m_graphs.end(); ++it) {
            it.value()->setPos(frame);
        }
    }

    long framesRemainingInGraph() {
        if (!m_graphs.size()) return 0;
        return live::audio::sampleRate() - m_graphs.begin().value()->pos();
    }

    void appendGraph(const long& frames) {
        if (frames <= 0 ) return;
        for (QMap<long, AudioGraph*>::iterator it = m_graphs.begin(); it != m_graphs.end(); ++it) {
            it.value()->append(frames);
        }
    }

    AudioGraph* graphForFrames(const long& frames) {
        return m_graphs.value(frames, 0);
    }

    static AudioSecond* load(const QByteArray&);
    QByteArray save();

    void setSampleOffset(int offset) {
        m_sampleOffset = offset;
    }

private:
    AudioSecond(const AudioSecond&)
      : m_sampleOffset(0)
      , m_data()
      , m_graphs()
      { TCRASH();
    }
    AudioSecond& operator=(const AudioSecond&) {
        TCRASH();
        return *this;
    }
};

class AudioSecondBank : public QObject
{
    Q_OBJECT
    QList<AudioSecond*> m_identity;
    QTimer t;
    QMutex x;

public:
    AudioSecond* buySecond(int offset) {
        AudioSecond* ret;
        x.lock();
        if (!m_identity.size()) {
            qCritical("No seconds to buy!");
            m_identity.push_back(new AudioSecond(offset));
        }
        ret = m_identity.takeFirst();
        x.unlock();
        ret->setSampleOffset(offset);
        QMetaObject::invokeMethod(&t,"start",Qt::QueuedConnection, Q_ARG(int,0));
        return ret;
    }

    friend class AudioContainer;

public:
    static AudioSecondBank* singleton;

    AudioSecondBank()
      : m_identity()
      , t(0)
    {
        t.setSingleShot(false);
        connect(&t, SIGNAL(timeout()), this, SLOT(allocSecond()));
        allocSecond();
    }
public slots:
    void allocSecond() {
        t.stop();
        while (m_identity.size() < 200) {
            AudioSecond* s = new AudioSecond(-1);
            x.lock();
            m_identity.push_back(s);
            x.unlock();
        }
    }
};

class LIBLIVECORESHARED_EXPORT AudioContainer
{
protected:
    float zero;                 /*N/A*/
    quint32 sampleRate;     /*VERIFY->003*/
    QList<AudioSecond*> m_data; /*004*/
    quint32 m_dataSize;             /*004*/
    QReadWriteLock m_readLock;          /*N/A*/
    QMap<long, int> m_graphs; /* length -> refCount */
    int m_graphPointingTo;
public:
    friend class AudioTrack;
    AudioContainer()
      : zero(0.0f)
      , sampleRate(live::audio::sampleRate())
      , m_data()
      , m_dataSize(0)
      , m_readLock(QReadWriteLock::NonRecursive)
      , m_graphs()
      , m_graphPointingTo(-1)
      {
    }

    void newGraph(long size) {
        if (++m_graphs[size] == 1) {
            for (int i = 0; i < m_data.size(); ++i) {
                if(m_data[i]) m_data[i]->newGraph(size);
            }
        }
    }

    void deleteGraph(long size) {
        if (--m_graphs[size] == 0) {
            for (int i = 0; i < m_data.size(); ++i) {
                if(m_data[i]) m_data[i]->deleteGraph(size);
            }
        }
    }

    void regSecond(AudioSecond* s) {
        for (QMap<long, int>::iterator it = m_graphs.begin(); it != m_graphs.end(); ++it) {
            for (int i = 0; i < it.value(); ++i) {
                s->newGraph(it.key());
            }
        }
    }

    void pointGraph(long frame) {
        if (int(frame/sampleRate) < m_data.size()) {
            m_graphPointingTo = (int)(frame/sampleRate);
            if(m_data[m_graphPointingTo]) m_data[m_graphPointingTo]->pointGraph(frame%sampleRate);
        }
    }

    void appendGraph(long frames) {
        while (m_graphPointingTo != -1 && m_graphPointingTo < m_data.size() && m_data[m_graphPointingTo]) {
            int fb = frames - m_data[m_graphPointingTo]->framesRemainingInGraph();
            m_data[m_graphPointingTo]->appendGraph(qMin(frames, m_data[m_graphPointingTo]->framesRemainingInGraph()));
            if (fb > 0) {
                frames = fb;
                if (m_graphPointingTo + 1 < m_data.size() && m_data[m_graphPointingTo + 1])
                    m_data[++m_graphPointingTo]->pointGraph(0);
                else {
                    m_graphPointingTo = -1; // this is usually transiant.
                    return;
                }
            } else {
                return;
            }
        }
    }

    AudioGraph* currentGraph(long frames) {
        if (m_graphPointingTo != -1 && m_graphPointingTo < m_data.size() && m_data[m_graphPointingTo])
            return m_data[m_graphPointingTo]->graphForFrames(frames);
        return 0;
    }

    AudioGraph* graphForPos(long frames, long pos) {
        if (pos/live::audio::sampleRate() >= 0 && pos/live::audio::sampleRate() < m_data.size() && m_data[pos/live::audio::sampleRate()])
            return m_data[pos/live::audio::sampleRate()]->graphForFrames(frames);
        return 0;
    }

    ~AudioContainer()
    {
        clear(1);
        m_dataSize=0;
    }

    void setData(const quint32&frame,const float&data)
    {
        lthread::assertAudio();
        if(data == zero)
        {
            return;
        }

        for(quint32 i=m_data.size()-1;i<=frame/sampleRate;i++)
        {
            m_data.push_back(0);
            m_dataSize=m_data.size();
        }

        if(!m_data[(int)(frame/sampleRate)])
        {
            m_data[(int)(frame/sampleRate)]=AudioSecondBank::singleton->buySecond((frame/sampleRate)*sampleRate);
            regSecond(m_data[(int)(frame/sampleRate)]);
        }

        (*m_data[(int)(frame/sampleRate)])[(int)frame]=data;
        (*m_data[(int)(frame/sampleRate)]).updateGraph(frame);
    }

    const float& getData(const int&frame)
    {
        if(m_dataSize<=frame/sampleRate||!m_data[(int)(frame/sampleRate)])
        {
            return zero;
        }
        else
        {
            return (*m_data[(int)(frame/sampleRate)])[frame];
        }
    }

    //The return is the count of data returned through "data". There may be more
    //if called for the next frame.
    //By default, if no data exists(i.e., it is all null), data will be returned as
    //a null pointer. If instead, data should be created, forceCreation should be true.
    //Remember to set the graph position, and to append graph after use.
    int getRawPointer(const quint32&frame,float*& data,bool forceCreation=0, bool enforceAudio = 1)
    {
        if (enforceAudio)
            lthread::assertAudio();
        sampleRate=audio::sampleRate();
        if((m_dataSize<=frame/sampleRate||!m_data[(int)frame/sampleRate])&&!forceCreation)
        {
            data=0;
            return (int)((frame/sampleRate)*sampleRate+sampleRate-frame);
        }
        else if(m_dataSize<=frame/sampleRate)
        {
            for(long i=m_data.size()-1;i<=(long)frame/(long)sampleRate;i++)
            {
                m_data.push_back(0);
                m_dataSize=m_data.size();
            }
        }

        if(!m_data[(int)frame/sampleRate]) {
            m_data[(int)(frame/sampleRate)]=AudioSecondBank::singleton->buySecond((frame/sampleRate)*sampleRate);
            regSecond(m_data[(int)(frame/sampleRate)]);
        }

        int id=(int)(frame/sampleRate);
        data=&m_data[id]->m_data[frame-m_data[id]->m_sampleOffset];
        return (int)(m_data[id]->m_sampleOffset+sampleRate-frame);
    }

    int getConstPointer(const quint32&frame,const float*& data) const
    {
        return const_cast<AudioContainer*>(this)->getRawPointer(frame, const_cast<float*&>(data), false, false);
    }

    class AudioDataDestroyer {
    public:
        AudioSecond* m_s;
        QReadWriteLock* m_l;
        AudioDataDestroyer(AudioSecond* s, QReadWriteLock* l) : m_s(s), m_l(l) {}
        void run() { if(m_l) m_l->lockForWrite(); delete m_s; if(m_l) m_l->unlock(); delete this; }
    };

    void clear(bool dying=0);

    float length() const
    {
        float ret = (float) m_data.size();
        int i;
        for(i = audio::sampleRate() - 1;i >= 0; --i) {
            if (m_data.back()->m_data[i]!=0.0f) break; // FIXME
        }
        ret -= float(audio::sampleRate() - i)/float(audio::sampleRate());
        return ret;
    }

    void lock() {
        m_readLock.lockForRead();
    }

    void unlock() {
        m_readLock.unlock();
    }

    static AudioContainer* load(const QByteArray&);
    QByteArray save();
};

}

#endif // AUDIOSECOND_H

/*******************************************************

    Part of the Creator Live Music Production Suite.
Copyright (C) Joshua Netterfield <joshua@nettek.ca> 2012

                  All rights reserved.

*******************************************************/

#ifndef METRONOME_H
#define METRONOME_H

#include <live/audio>
#include <live/object>
#include <live/timesignature>
#include <live/variantbinding>
#include <QTime>

namespace live {

// Metronome calls are from it's own thread, so you need to read the documentation
// for QObject::connect and Qt::connectionType. Usually you want to explictly set
// the connection type to direct.

class LIBLIVECORESHARED_EXPORT SyncData
{
public:
    const TimeSignature& ts;
    const float& bpm;
    const float& ppb;

    const float& beat;
    const float& pulses;

    SyncData(const TimeSignature&cts,const float&cbpm,const float&cppb,const float&cbeat,const float&cpulses) :
        ts(cts),
        bpm(cbpm),
        ppb(cppb),
        beat(cbeat),
        pulses(cpulses)
    {

    }
};

class LIBLIVECORESHARED_EXPORT AbstractSync
{
public:
    void* abst_t;
    AbstractSync(void* abstt)
      : abst_t(abstt)
      {
    }

    virtual void sync(const SyncData &)=0;
    virtual ~AbstractSync() {}
private:
    AbstractSync(const AbstractSync& t)
      : abst_t(t.abst_t)
      {
    }
    AbstractSync& operator=(const AbstractSync& t) {
        abst_t = t.abst_t;
        return *this;
    }
};

template<class T> class /*LIBLIVECORESHARED_EXPORT*/ ConcreteSync : public AbstractSync
{
public:
    ConcreteSync(T* at)
      : AbstractSync(at)
      , t(at)
      {
    }

    T* t;
    void sync(const SyncData&s) {
        t->sync(s);
    }

private:
    ConcreteSync(const ConcreteSync<T>&)
      : t(0)
      { TCRASH();
    }

    ConcreteSync<T>& operator=(ConcreteSync<T>&) {
        TCRASH();
        return *this;
    }
};

class LIBLIVECORESHARED_EXPORT Metronome : public QObject
{
    Q_OBJECT
private:
    QList<AbstractSync*> _as;
    QTime startTime;    //not saved
    TimeSignature m_ts;
public:
    Bound<float> b_bpm;
private:
    float m_ppq;
    float m_lastTime;    //not saved
    float m_barStart;    //not saved
    float m_lastPpq;
    bool m_isActive;

public:
    friend class SecretAudio;
    Metronome(TimeSignature cts,float cbpm,float cppq=96.0f)
      : _as()
      , startTime(QTime::currentTime())
      , m_ts(cts)
      , b_bpm(cbpm)
      , m_ppq(cppq)
      , m_lastTime(float(startTime.msecsTo(QTime::currentTime())))
      , m_barStart(float(startTime.msecsTo(QTime::currentTime())))
      , m_lastPpq(0)
      , m_isActive(1)
      { pause();
    }

    virtual ~Metronome()
    {
    }

    const TimeSignature& ts()
    {
        Q_ASSERT(this);
        return m_ts;
    }

    float bpm() const
    {
        Q_ASSERT(this);
        return b_bpm;
    }

    float ppq() const
    {
        Q_ASSERT(this);
        return m_ppq;
    }

    bool active() const
    {
        Q_ASSERT(this);
        return m_isActive;
    }

    void clock();

    QByteArray save();
    static Metronome* load(const QByteArray&str);

    void setTs(const TimeSignature& cts)
    {
        Q_ASSERT(this);
        if(cts.denomenator!=4&&cts.denomenator!=8)
        {
            return;
        }
        kill_kitten m_ts=cts;
    }

    void setBpm(const float& cbpm)
    {
        Q_ASSERT(this);
        kill_kitten b_bpm=cbpm;
    }

    void setPpq(const float& cppq)
    {
        Q_ASSERT(this);
        kill_kitten m_ppq=cppq;
    }

    void pause()
    {
        Q_ASSERT(this);
        Q_ASSERT(m_isActive);

        kill_kitten {
            m_lastTime= float(startTime.msecsTo(QTime::currentTime()));

            m_barStart-=m_lastTime;
            m_isActive=0;
        }
    }

    void start()
    {
        Q_ASSERT(this);
        kill_kitten {
            Q_ASSERT(!m_isActive);
            m_lastTime= float(startTime.msecsTo(QTime::currentTime()));
            m_barStart+=m_lastTime;
            //DEBUG
            m_lastPpq=-1;

            m_isActive=1;
        }
        Q_ASSERT(b_bpm);
        emit reactivated();
    }

    void pulse()
    {
        float time( float(startTime.msecsTo(QTime::currentTime())) );
        float bpm( (m_ts.denomenator==4) ? b_bpm : b_bpm*2.0f );
//        int ppq( (m_ts.denomenator==4) ? m_ppq : m_ppq/2 );
        float pbeat=60000.0f/(float)bpm;

        double curBeat=qRound((double)(time-m_barStart)/pbeat);
        m_barStart=time - static_cast<float>(curBeat * pbeat);
    }

    template<class T> void registerSync(T* t)
    {
        kill_kitten _as.push_back(new ConcreteSync<T>(t));
    }
    template<class T> void unregisterSync(T* t)
    {
        kill_kitten for(int i=0;i<_as.size();i++)
        {
            if(_as[i]->abst_t==t) {
                delete _as.takeAt(i);
                --i;
            }
        }
    }
signals:
    void reactivated();
};

}

#endif // METRONOME_H

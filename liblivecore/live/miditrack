/*******************************************************

    Part of the Creator Live Music Production Suite.
Copyright (C) Joshua Netterfield <joshua@nettek.ca> 2012

                  All rights reserved.

*******************************************************/

#ifndef MIDITRACK_H
#define MIDITRACK_H

#include <live/audio>
#include <live/object>
#include <QMutex>
#include <QFile>
#include "live/midieventcounter"

namespace live {

class LIBLIVECORESHARED_EXPORT MidiTrack : public QObject, public Object
{
    Q_OBJECT
    QMutex x_mTrack;
public:
    LIVE_MIDI
    LIVE_EFFECT
    bool mOn() const{ return 1; }
    bool aOn() const { return 0; }
    /*003*/ Bound<int> b_curPos;       //let s_curPos rep time in msec
    /*004*/ Bound<int> b_lastPos;
    /*005*/ Bound<int> b_recStart;     //msec at which recording began
    /*006*/ Bound<int> b_systemTimeStart;  //system time in msec at which recording began
    /*009*/ Bound<bool> b_record;
    /*010*/ Bound<bool> b_overdub;
    /*011*/ Bound<bool> b_playback;
    /*012*/ Bound<bool> b_mute;
private:
    /*013*/ QList<Event*>* s_data;
    /*014*/ int mTrack_id;
    /*015B*/ static int lastId;
    QList<Event> s_cache;
    bool s_thru;    /*NOT SAVED, keep it that way*/

public:
    MidiTrack();
    void _setThru(bool a) { s_thru=a; }
    const bool& isRecord() const;
    const bool& isOverdub() const;
    const bool& isPlay() const;
    const bool& isMute() const;
    const int& pos();
    QList<Event> getData() {
        QList<Event> ret;
        live_mutex(x_mTrack) {
            for(int i=0;i<s_data->size();i++) {
                ret.push_back(*(*s_data)[i]);
            }
        }
        return ret;
    }
    void remove(int a,int b) {
        live_mutex(x_mTrack) for(int i=s_data->size()-1; i>=0; i--)
        {
            if((*s_data)[i]->time.toTime_ms()>=a&&(*s_data)[i]->time.toTime_ms()<=b)
            {
                Event* buddy=(*s_data)[i]->buddy;
                delete s_data->takeAt(i);
                if(s_data->contains(buddy)) delete (*s_data).takeAt((*s_data).indexOf(buddy));
                i=s_data->size();   //i.e., reset;
                continue;
            }
        }
    }
private:
    class EventListDeleter {
    public:
        QList<Event*>* s_e;
        EventListDeleter(QList<Event*>* e) : s_e(e) {}
        void run() {
            while (s_e->size()) {
                delete s_e->takeFirst();
            }
            delete s_e;
            delete this;
        }
    };

public slots:
    void startRecord();
    void stopRecord();
    void startOverdub();
    void stopOverdub();
    void startPlayback();
    void stopPlayback();
    void startMute();
    void stopMute();
    void setPos(int pos);
    void importFile(QString path);
    void exportFile(QString path);
    void mIn(const Event *data, ObjectChain*p);
    void timeEvent();
    virtual void clearData();

public:
    QByteArray save();
    static MidiTrack* load(const QByteArray&str);

private:
    MidiTrack(const MidiTrack&)
      : QObject()
      , Object("TCRASH", 0, 0, 2)
      , x_mTrack(QMutex::Recursive)
      , b_curPos(0)
      , b_lastPos(0)
      , b_recStart(0)
      , b_systemTimeStart(0)
      , b_record(0)
      , b_overdub(0)
      , b_playback(0)
      , b_mute(0)
      , s_data(0)
      , mTrack_id(0)
      , s_cache()
      , s_thru(0)
      { TCRASH();
    }

    MidiTrack& operator=(const MidiTrack&) {
        TCRASH();
        return *this;
    }

signals:
    void dataUpdated();
};

}

#endif // MIDITRACK_H

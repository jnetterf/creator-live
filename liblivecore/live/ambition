/*******************************************************

    Part of the Creator Live Music Production Suite.
Copyright (C) Joshua Netterfield <joshua@nettek.ca> 2012

                  All rights reserved.

*******************************************************/

#ifndef AMBITION_H
#define AMBITION_H

#include <live/audio>
#include <live/object>
#include <live/variantbinding>
#include <live/midieventcounter>
#include <live/songsystem>

#include <iostream>

namespace live {

class MidiEventFilter : public live::Object {
    int id;
    int filterId;
public:
    LIVE_MIDI
    LIVE_EFFECT
    MidiEventFilter() : live::Object("MidiFilter", false, false, 2), id(0), filterId(0) {}

    void setId(int i) { id = i; }
    void setFilter(int i) { filterId= i; }

    void mIn(const Event *data, ObjectChain *p) {
        ((live::song::current()->midiMaps.value(id)->b_filterForNote[data->note()]==filterId));
        bool ok = 0;
        if (((data->simpleStatus() != live::Event::NOTE_ON) && (data->simpleStatus() != live::Event::NOTE_OFF))) {
            ok = 1;
        }
        if (live::song::current()->midiMaps.value(id))
            if (live::song::current()->midiMaps.value(id)->b_filterForNote[data->note()] == filterId) {
                ok = 1;
            }
        if (ok) {
            p->push_back(this);
            mOut(data,p);
            p->pop_back();
        }
    }

};

class LIBLIVECORESHARED_EXPORT Ambition
{
    live::ObjectPtr m_input;          /*003*/
    live::ObjectChain m_chain;        /*004*/
    live::ObjectPtr m_output;         /*005*/
    live::ObjectPtr m_loopbackOut;    /*006*/
    QList<Connection*> m_connections;
    friend class live::Object;
    QMutex x_ambition;
    ObjectPtr mef;
public:
    RELOADABLE(Ambition)
    live::Bound<QString> b_output;
    Ambition(live::ObjectPtr cinput=0,live::ObjectChain chain=live::ObjectChain(), live::ObjectPtr coutput=0, live::ObjectPtr cloop=0);
    ~Ambition();

    QString outputName() { return m_output.valid() ? m_output->name() : "NONE"; }

    void setInput(live::ObjectPtr o)
    {
        live_mutex(x_ambition) {
            if(m_connections.size())
            {
                unset();
            }
            m_input=o;
            setChain(m_chain);
        }
    }

    void setOutput(live::ObjectPtr o)
    {
        live_mutex(x_ambition) {
            if(m_connections.size())
            {
                unset();
            }
            m_output=o;
            setChain(m_chain);
            b_output=o->name();
        }
    }

    void setLoopbackOut(live::ObjectPtr o)
    {
        live_mutex(x_ambition) {
            if(m_connections.size())
            {
                unset();
            }
            m_loopbackOut=o;
            setChain(m_chain);
        }
    }

    bool setChain(live::ObjectChain c)
    {
        live_mutex(x_ambition) {
            if(m_connections.size())
            {
                unset();
            }
            m_chain=c;

            if(m_input.valid()&&m_output.valid()&&m_loopbackOut.valid()&&m_output->isMidiObject()&&m_output->isAudioObject()&&m_input->isMidiObject()&&m_loopbackOut->isAudioObject())
            {
                qDebug() << "Establishing Hybrid Connection";
                // Prefered type of connection for hybrid situations.

                // Process MIDI only until first hybrid. (0)
                // Process hybrid only until first audio.(1)
                // Process audio until end.              (2)

                bool ok=1;
                int stage=0;
                for(int i=0;i<m_chain.size();i++) {
                    if(stage==0&&m_chain[i]->isAudioObject()) {
                        if(m_chain[i]->isMidiObject()) {
                            stage=1;
                        } else {
                            stage=2;
                        }
                    } else if(stage==1&&!m_chain[i]->isMidiObject()) {
                        if(m_chain[i]->isAudioObject()) {
                            stage=2;
                        } else {
                            ok=0;
                            break;
                        }
                    } else if(stage==2&&!m_chain[i]->isAudioObject()) {
                        ok=0;
                        break;
                    }
                }

                if(ok) {
                    qDebug() << "(Done)";
                    stage=0;
                    m_connections.push_back(new Connection(m_input,mef,HybridConnection));
                    live::ObjectPtr prev=mef;
                    for(int i=0;i<m_chain.size();i++) {
                        if(stage==0&&m_chain[i]->isAudioObject()) {
                            qDebug() << "Stage 0";
                            m_connections.push_back(new Connection(prev,m_output,MidiConnection));
                            m_connections.push_back(new Connection(m_output,m_chain[i],AudioConnection));

                            m_chain[i]->m_aOn=1;
                            if(m_chain[i]->isMidiObject()) {
                                m_connections.push_back(new Connection(prev,m_chain[i],MidiConnection));
                                m_chain[i]->m_mOn=1;
                                stage=1;
                            } else {
                                m_chain[i]->m_mOn=0;
                                stage=2;
                            }
                        } else if(stage==1&&!m_chain[i]->isMidiObject()) {
                            qDebug() << "Stage 1";
                            m_connections.push_back(new Connection(prev,m_chain[i],AudioConnection));
                            m_chain[i]->m_aOn=1;
                            m_chain[i]->m_mOn=0;

                            if(m_chain[i]->isAudioObject()) {
                                stage=2;
                            } else {
                                ok=0;
                                break;
                            }
                        } else if(stage==2&&!m_chain[i]->isAudioObject()) {
                            ok=0;
                            break;
                        } else {
                            qDebug() << "Stage 2";
                            if(stage==0||stage==1) {
                                m_chain[i]->m_aOn=0;
                                m_chain[i]->m_mOn=1;
                                m_connections.push_back(new Connection(prev,m_chain[i],HybridConnection));
                            } else m_chain[i]->m_mOn=0;

                            if(stage==1||stage==2) {
                                m_connections.push_back(new Connection(prev,m_chain[i],AudioConnection));
                                m_chain[i]->m_mOn=0;
                                m_chain[i]->m_aOn=1;
                            } else m_chain[i]->m_aOn=0;
                        }
                        prev=m_chain[i];
                    }
                    if(stage==0) {
                        m_connections.push_back(new Connection(prev,m_output,MidiConnection));
                        m_connections.push_back(new Connection(m_output,m_loopbackOut,AudioConnection));
                    } else {
                        m_connections.push_back(new Connection(prev,m_loopbackOut,AudioConnection));
                    }

                    Q_ASSERT(ok);

                    return 1;
                }
            }

            if(m_input.valid()&&m_output.valid()&&m_input->isMidiObject()&&m_output->isMidiObject())
            {
                qDebug() << "Establishing Midi or SIMPLE Hybrid Connection";
                bool ok=1;
                for(int i=0;i<m_chain.size();i++) if(!m_chain[i]->isMidiObject()) ok=0;
                if(ok) {
                    qDebug() << "(Done)";
                    m_connections.push_back(new Connection(m_input,mef,HybridConnection));
                    live::ObjectPtr mprev=mef;
                    for(int i=0;i<m_chain.size();i++)
                    {
                        m_connections.push_back(new Connection(mprev,m_chain[i],HybridConnection));
                        mprev=m_chain[i];
                    }
                    if(!m_loopbackOut.valid()) {
                        m_connections.push_back(new Connection(mprev,m_output,MidiConnection));
                    } else {
                        m_connections.push_back(new Connection(mprev,m_output,MidiConnection));
                        m_connections.push_back(new Connection(m_output,m_loopbackOut,AudioConnection));
                    }
                    return 1;
                }
            }

            if(m_input.valid()&&m_output.valid()&&(m_input->isAudioObject()||(m_loopbackOut.valid()&&m_loopbackOut->isAudioObject()))&&m_output->isAudioObject())
            {
                qDebug() << "Establishing Audio Connection";
                bool ok=1;
                for(int i=0;i<m_chain.size();i++) if(!m_chain[i]->isAudioObject()) ok=0;
                if(ok) {
                    qDebug() << "(Done)";
                    live::ObjectPtr aprev=m_input;
                    if(m_loopbackOut.valid()&&m_loopbackOut->isAudioObject()) {
                        m_connections.push_back(new Connection(aprev,m_output,AudioConnection));
                        aprev=m_output;
                    }
                    for(int i=0;i<m_chain.size();i++)
                    {
                        m_connections.push_back(new Connection(aprev,m_chain[i],AudioConnection));
                        aprev=m_chain[i];
                    }
                    if(!m_loopbackOut.valid()) {
                        m_connections.push_back(new Connection(aprev,m_output,HybridConnection));
                    } else {
                        m_connections.push_back(new Connection(aprev,m_loopbackOut,AudioConnection));
                    }
                    return 1;
                }

            }
            else if (m_input.valid() && m_output.valid())
            {
                qCritical() << "No solution to audio train...";
                return 0;
            }
        }
        return 1;
    }

    void unset()
    {
        while (m_connections.size())
        {
            live_mutex(x_ambition) delete m_connections.takeFirst();
        }
    }

    void set() // helper
    {
        setChain(m_chain);
    }

    inline int chainSize() const
    {
        return m_chain.size();
    }

    void insert(int i,live::ObjectPtr b)
    {
        live_mutex(x_ambition) {
            live::ObjectChain c2=m_chain;
            c2.insert(i,b); //should be able to check
            setChain(c2);
        }
    }

    void removeFromChain(int i) // helper
    {
        live::ObjectChain c2=m_chain;
        c2.removeAt(i);
        setChain(c2);
    }

    bool inputIsAudioObject() const
    {
        if(!m_input)
        {
            return 0;
        }
        else
        {
            return m_input->isAudioObject();
        }
    }

    bool inputIsMidiObject() const
    {
        if(!m_input)
        {
            return 0;
        }
        else
        {
            return m_input->isMidiObject();
        }
    }

    live::ObjectPtr at(int b)
    {
        return m_chain[b];
    }

    void setInputId(int i, int t)
    {
        cast<MidiEventFilter*>(mef)->setId(i);
        cast<MidiEventFilter*>(mef)->setFilter(t);
    }

private:
    Ambition(const live::Ambition&)
      : m_input()
      , m_chain()
      , m_output()
      , m_loopbackOut()
      , m_connections()
      , x_ambition(QMutex::Recursive)
      , mef(new MidiEventFilter)
      , b_output()
      { TCRASH();
    }

    Ambition& operator=(const Ambition&) {
        TCRASH();
        return *this;
    }
};

class LIBLIVECORESHARED_EXPORT ambition : public QObject
{
    Q_OBJECT
    static ambition* m_self;
public:
    static ambition* self();
    static void notifyCreated(Ambition*);
    static void notifyDestroyed(Ambition*);
protected:
    void u_notifyCreated(Ambition*);
    void u_notifyDestroyed(Ambition*);
signals:
    void created(Ambition*);
    void destoryed(Ambition*);
};

} // namespace live

#endif // AMBITION_H

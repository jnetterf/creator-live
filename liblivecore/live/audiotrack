/*******************************************************

    Part of the Creator Live Music Production Suite.
Copyright (C) Joshua Netterfield <joshua@nettek.ca> 2012

                  All rights reserved.

*******************************************************/

#ifndef AUDIOTRACK_H
#define AUDIOTRACK_H

#include "live/object"
#include "live/audiosecond"
#include <QMutex>

#if !defined(__QNX__) && !defined(_WIN32)
#include "sndfile.hh"
#endif

namespace live {

class LIBLIVECORESHARED_EXPORT AudioTrack : public QObject, public Object
{
    Q_OBJECT
public:
    LIVE_AUDIO
    LIVE_EFFECT
    bool aOn() const { return 1; }
    bool mOn() const{ return 0; }
    const quint32& nframes;
    AudioContainer** acquireData() {
        for(int i=0;i<m_chans;i++) {
            if(m_container[i]) m_container[i]->lock();
        }
        return m_container;
    }
    void releaseData() {
        for(int i=0;i<m_chans;i++) {
            if(m_container[i]) m_container[i]->unlock();
        }
    }

    QObject* qoThis() { return this; }

private:
    AudioContainer** m_container;
    qint32 m_chans;
    qint64 m_curPos;
    qint32 m_vol;          //m_vol e (0,100)
    qint32 m_pan;          //m_pan e (0,100) i.e., (L to R)
    bool m_record;
    bool m_overdub;
    bool m_playback;
    bool m_mute;
    int m_simpleCount;
    int m_updateCounter;

    float* m_proc;

public:
    AudioTrack(int cchans);
    ~AudioTrack();
    const int& volume() const;
    const int& pan() const;
    const bool& isRecord() const;
    const bool& isOverdub() const;
    const bool& isPlay() const;
    const bool& isMute() const;
    float pos() const;
    float length() const;

    void newGraph(long size) {
        for (int i = 0; i < m_chans; ++i) {
            m_container[i]->newGraph(size);
            m_container[i]->pointGraph(m_curPos);
        }
    }

    void deleteGraph(long size) {
        for (int i = 0; i < m_chans; ++i)
            m_container[i]->deleteGraph(size);
    }

    AudioGraph* currentGraph(long frames, int chan) {
        if (chan < m_chans && chan > -1)
            return m_container[chan]->currentGraph(frames);
        return 0;
    }

    AudioGraph* graphForPos(long frames, int chan, long pos) {
        if (chan < m_chans && chan > -1)
            return m_container[chan]->graphForPos(frames, pos);
        return 0;
    }

private:
    class AudioDataDestroyer {

    };

public slots:
    void setVol(int vol);
    void setPan(int pan);
    void startRecord();
    void stopRecord();
    void startOverdub();
    void stopOverdub();
    void startPlayback();
    void stopPlayback();
    void startMute();
    void stopMute();
    void setPos(float pos);
    void aIn(const float *in, int chan, Object *p);
    void aThru(float*proc,int chan);
    void clearData();
    void clearData(const qint64 &a, const qint64 &b);
    static int formatForString(QString s,bool verifyAvailable=0);
    static int rateForInt(int i);
    bool exportFile(QString filename,QString format="guess",int depth=24);
    bool importFile(QString filename);
    QByteArray save();
    static AudioTrack* load(const QByteArray&str);

signals:
    void dataUpdated(qint64 start=-1, qint64 end=-1);
    void locationChanged(qint64);

private:
    AudioTrack(const live::AudioTrack&);

    AudioTrack& operator=(const AudioTrack&) {
        TCRASH();
        return *this;
    }
};

}

#endif // AUDIOTRACK_H
